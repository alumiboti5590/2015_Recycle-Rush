// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team5590.robot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DoubleSolenoid slidesDrawerSlide;
    public static SpeedController drivetrainLeftTrack;
    public static SpeedController drivetrainRightTrack;
    public static RobotDrive drivetrainRobotDrive21;
    public static SpeedController verticalLiftLiftLeft;
    public static SpeedController verticalLiftLiftRight;
    public static Solenoid autoDragDragSole;
    public static Gyro autoFinderAutoGyro;
    public static Compressor compressor;
    public static Encoder encode;
    public static Victor liftController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	slidesDrawerSlide = new DoubleSolenoid(0, 0, 1);      
        LiveWindow.addActuator("Slides", "DrawerSlide", slidesDrawerSlide);
        
        compressor = new Compressor();
        compressor.stop();
        
        drivetrainLeftTrack = new Talon(2);
        LiveWindow.addActuator("Drivetrain", "LeftTrack", (Talon) drivetrainLeftTrack);
        
        drivetrainRightTrack = new Talon(3);
        LiveWindow.addActuator("Drivetrain", "RightTrack", (Talon) drivetrainRightTrack);
        
       
      //  LiveWindow.addActuator("Drivetrain", "RightTrack", (Talon) drivetrainRightTrack);
        
        
        drivetrainRobotDrive21 = new RobotDrive(drivetrainLeftTrack, drivetrainRightTrack);
        
        drivetrainRobotDrive21.setSafetyEnabled(false);
        drivetrainRobotDrive21.setExpiration(0.1);
        drivetrainRobotDrive21.setSensitivity(0.5);
        drivetrainRobotDrive21.setMaxOutput(1.0);
        
//        verticalLiftLiftLeft = new Victor(4);
//        LiveWindow.addActuator("VerticalLift", "LiftLeft", (Victor) verticalLiftLiftLeft);
//        
//        verticalLiftLiftRight = new Victor(5);
//        LiveWindow.addActuator("VerticalLift", "LiftRight", (Victor) verticalLiftLiftRight);
//        
        autoDragDragSole = new Solenoid(0, 2);
        LiveWindow.addActuator("AutoDrag", "DragSole", autoDragDragSole);
        
        autoFinderAutoGyro = new Gyro(0);
        LiveWindow.addSensor("AutoFinder", "AutoGyro", autoFinderAutoGyro);
        autoFinderAutoGyro.setSensitivity(0.007);
        
        encode = new Encoder(0, 1);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
