// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team5590.robot;


import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class VerticalLift extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private SpeedController liftController = RobotMap.liftController;
	private Encoder liftLeft = RobotMap.liftLeft;
	private Encoder liftRight = RobotMap.liftRight;
	private int countLeft = 0;
	private int countRight = 0;
	private int returnToZero;
	private final double MAX_HEIGHT = 55.5; //Inches
	private double curHeight = 0;
	private double posHeight;
	

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public void init() {
		liftRight.reset();
		liftLeft.reset();
	}
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
   
	public int mover(int position) { //Decides whether needs to be raised or lowered.
		posHeight = heightNeed(position);
		currentH();
		if (posHeight < curHeight) {
			return lifter(position);
		} else {
			return dropper(position);
		}
	}
	
	public int lifter(int position) { //Lifts to height position
		posHeight = heightNeed(position);
		currentH();
		if (curHeight < posHeight) {
			liftController.set(.3);
			return position;
		} else {
			return -1;
		}
	}
	
	public int dropper(int position) { //Lowers to height position
		posHeight = heightNeed(position);
		currentH();
		if (curHeight > posHeight) {
			liftController.set(-.3);
			return position;
		} else {
			return -1;
		}
	}
	
	public void currentH() { //Gets current distance
		curHeight = (liftLeft.getDistance() + liftRight.getDistance()) / 2;
		
	}
	
	public double heightNeed(int pos) { //Gets needed height from position
		switch (pos) { //Returns inches
			case 1:
				return 7.5;
			case 2:
				return 19.6;
			case 3:
				return 31.7;
			case 4:
				return 43.8;
			default:
				return 0;
		}
	}
	
    public void setHeight(double amount) {
    	liftController.set(amount);
    }
    
	

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}

